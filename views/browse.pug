extends ./layout.pug

include ./_mixins.pug

mixin browsetreeitem(uid, options, subtree, candrop, depth)
  - var attrs = { 'class': {} }
  - attrs['data-url'] = options.path.join('/')
  - attrs['data-uid'] = uid
  - attrs['data-ico-off'] = 'fa-folder';
  - attrs['data-ico-on'] = 'fa-folder-open';
  - attrs.id = 't-' + uid
  - attrs['class'].active = (uid === options.active.id)
  - attrs['class']['tree-item-subtree'] = !!subtree && subtree.length > 0
  - attrs['class']['view-droppable'] = candrop
  - var canexpand = !!subtree && subtree.length > 0
  div.tree-item&attributes(attrs)
    - for (var i = 0; i < depth; i++)
      div.tree-pad
    div.tree-expand
      span&attributes({ 'class': {
        fa: canexpand,
        'fa-caret-down': canexpand && options.expand,
        'fa-caret-right': canexpand && !options.expand
      }})
    div.tree-icon
      span.fa(class='fa-folder'+(uid === options.active.id ? '-open' : ''))
    div.tree-label
      = options.name
  if canexpand
    - var relpath = options.active.relpath;
    div.tree(style=!options.expand && 'display: none')
      each it in subtree
        +browsetreeitem(it.uid, {
          name: it.name,
          expand: it.name === relpath[0] && relpath.length > 1,
          path: options.path.concat([ encodeURIComponent(it.name) ]),
          active: {
            id: pathid,
            relpath: it.name === relpath[0] ? relpath.slice(1) : []
          }
        }, it.dirs, candrop || it.canwrite, (+depth || 0) + 1)

block contents
  - var istrash = typeof trash !== 'undefined'
  div.view-wrap
    div.nav-out
      div.nav-in
        div.nav#nav
          div.nav-padding#nav-padding
          div.nav-wrap
            ul#nav-path
              +navitem(t(istrash ? 'trash.label' : 'folders'), istrash ? 'trash' : '0', true)
              if folder
                +navitem(folder.name, folder._.uid)
                - var p = []
                each d in path||[]
                  - p.push(d);
                  - var r = folder.resource(p.join('/'))
                  +navitem(d, r.uid)
                  - r.unref()
          div.nav-toolbox
            div.view-tools#nav-tools
              if req.user.is('admin')
                +action('multi', 'folder|#f-0', 'folderAccessList', 'folder.access', 'user-plus', 'none')
                +action('multi', 'folder|#f-0', 'itemDelete', 'folder.delete', 'trash-o', 'none')
              +action('multi', '*|:not(#f-trash,#f-0)', 'itemDelete', 'folder.delete', 'trash-o', 'none')
              +action('multi', 'trash|#f-trash', 'trashRestore', 'trash.restore', 'reply', 'none')
              +action('multi', 'trash|#f-trash', 'trashRemove', 'trash.remove', 'remove', 'none')
    div.view-wrap-in
      div.view-wrap-in-2
        div.view
          div.view-aside#view-aside(style='width:0')
            - var cond = req.user.is('admin') ? ':not(#f-trash)' : ':not(#f-trash,#f-0,.read-only)'
            - var canadd = req.user.is('admin') || (folder && folder.canwrite(req.user))
            div.button-box(data-cond="", style=canadd?false:"display: none")
              button(type="button", disabled=!canadd, data-handler='folderAdd')
                span.fa.fa-plus
                = t("folder.new")
            div.tree-box.view-drop-target
              div.tree.tree-large
                +browsetreeitem('0', {
                  name: t('folders'),
                  expand: !!folder,
                  path: [ req.baseUrl ],
                  active: {
                    id: pathid,
                    relpath: folder ? [ folder.name ].concat(path) : []
                  }
                }, folders, false)
                +browsetreeitem('trash', {
                  name: t('trash.label'),
                  path: [ req.baseUrl, '.trash' ],
                  active: {
                    id: pathid
                  }
                })

          div.view-resize#view-resize
            div.view-handle
          div.view-contents#view-contents
            include ./loader.pug
            include ./folder.pug
